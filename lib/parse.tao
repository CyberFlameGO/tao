import "std.tao"

# fn fold A, B : ? -> (? -> A -> ?) -> ? -> B =
#     | init, _, [] => init
#     \ init, f, [x .. tail] => fold(f(init, x), f, tail)

fn reduce A, B = f, (init, xs) : (A, [B]) => fold(init, f, xs)

fn fold_r A, B =
	| init, _, [] => init
	\ init, f : A -> B -> ?, [x .. xs] => f(x, fold_r(init, f, xs))

fn reduce_r A, B = f, (xs, init) : ([B], A) => fold_r(init, f, xs)

fn map_res A, B, E : (A -> B) -> Result A E -> Result B E =
	| f, Ok ok => Ok ok->f
	\ _, Err err => Err err

data ParseErr I =
	| UnexpectedEnd
	| ExpectedFound (Maybe I, I)
	| ExpectedPat Str
	\ ExpectedMore

for I < Show member ParseErr I of Show =
    => show = fn
        | UnexpectedEnd => "unexpected end of input"
        | ExpectedFound (expected, found) => "expected " ++ (when expected is
            | Just expected => "'" ++ expected->show ++ "'"
            \ None => "end of input") ++ " found '" ++ found->show ++ "'"
        | ExpectedPat pat => "expected " ++ pat
        \ ExpectedMore => "not enough elements"

type Parser I, O = [I] -> Result (O, [I]) (ParseErr I)

fn filter_tok I, O : (I -> Result O (ParseErr I)) -> Parser I O =
    | _, [] => Err UnexpectedEnd
    \ f, [head .. tail] => head->f->map_res(fn o => (o, tail))

fn just : Char -> ? =
    c => filter_tok(fn head => if head = c
        then Ok head
        else Err ExpectedFound (Just c, head))

fn and_then I, O, U : Parser I U -> Parser I O -> Parser I (O, U) =
	b, a, xs => when xs->a is
		| Err err => Err err
		\ Ok (a, xs) => when xs->b is
			| Err err => Err err
			\ Ok (b, xs) => Ok ((a, b), xs)

fn or_else I, O : Parser I O -> Parser I O -> Parser I O =
	a, b, xs => when xs->a is
		| ok ~ Ok _ => ok
		\ Err _ => when xs->b is
			| ok ~ Ok _ => ok
			\ err ~ Err _ => err

fn repeated I, O : Parser I O -> Parser I [O] =
	a, xs => when xs->a is
		| Ok (out, tail) => when tail->repeated(a) is
			| Ok (items, tail) => Ok ([out .. items], tail)
			\ err ~ Err _ => Ok ([], tail)
		\ Err err => Ok ([], xs)

fn repeated_at_least I, O : Nat -> Parser I O -> Parser I [O] =
	n, a, xs => when xs->repeated(a) is
		| ok ~ Ok (out, tail) => if out->len >= n
			then ok
			else Err ExpectedMore
		\ err ~ Err _ => err

fn map_to I, O, U : (O -> U) -> Parser I O -> Parser I U =
    f, a, xs => xs->a->map_res(fn (out, tail) => (out->f, tail))

fn then_ignore I, O, U : Parser I U -> Parser I O -> Parser I O =
    b, a => a
    -> and_then(b)
    -> map_to(fn (a, _) => a)

fn ignore_then I, O, U : Parser I U -> Parser I O -> Parser I U =
    b, a => a
    -> and_then(b)
    -> map_to(fn (_, b) => b)

def whitespace = just(' ')
	-> or_else(just('\t'))

def whitespaces = whitespace->repeated

fn padded O : Parser Char O -> Parser Char O =
    a => whitespaces
    -> ignore_then(a)
    -> then_ignore(whitespaces)

fn recurse I, O : Parser I O -> Parser I O = f, xs => when xs->f is
    | Ok (out, tail) => Ok (out, tail)
    \ Err e => Err e

data FindErr =
	\ NotFound

fn find_start : Nat -> Char -> Str -> Result Nat FindErr =
	| idx, c, [head .. tail] => if c = head
		then Ok idx
		else tail->find_start(idx + 1, c)
	\ idx, c, [] => Err NotFound

def find = find_start(0)

fn eoi I : Parser I () =
    | [] => Ok ((), [])
    \ [x ..] => Err ExpectedFound (None, x)

fn char_to_num = c => "0123456789"->find(c)

def digit = filter_tok(fn c => when c->char_to_num is
	| Ok n => Ok n
	\ Err NotFound => Err ExpectedPat "digit")

def number = digit
	-> repeated_at_least(1)
	-> map_to(fn xs => xs->fold(0, fn a, x => a * 10 + x))
	-> padded

data Unary =
	\ Neg

data Binary =
	| Add
	| Sub
	\ Mul

data Expr =
	| Natural Nat
	| Unary (Unary, Expr)
	\ Binary (Binary, Expr, Expr)

def atom = number
	-> map_to(fn x => Natural x)
	-> or_else(just('(')
		-> padded
		-> ignore_then(recurse(fn xs => xs->expr_parser))
		-> then_ignore(just(')'))
		-> padded)

fn op = c => just(c)->padded

def unary = op('-')
	-> map_to(fn _ => Neg)
	-> repeated
	-> and_then(atom)
	-> map_to(reduce_r(fn op, a => Unary (op, a)))

def product_parser = unary
	-> and_then(op('*')->map_to(fn _ => Mul)
		-> and_then(unary)
		-> repeated)
	-> map_to(reduce(fn a, (op, b) => Binary (op, a, b)))

def sum_parser = product_parser
	-> and_then(op('+')->map_to(fn _ => Add)
		-> or_else(op('-')->map_to(fn _ => Sub))
		-> and_then(product_parser)
		-> repeated)
	-> map_to(reduce(fn a, (op, b) => Binary (op, a, b)))

def expr_parser : Parser Char Expr = sum_parser

fn do_parse I, O : Parser I O -> [I] -> Result O (ParseErr I) = parser, input =>
    when input->(parser->and_then(eoi)) is
        | Ok ((o, _), _) => Ok o
        \ Err e => Err e

fn eval =
	| Natural x => --x
	| Unary (Neg, a) => -a->eval
	| Binary (Add, a, b) => a->eval + b->eval
	| Binary (Sub, a, b) => a->eval - b->eval
	\ Binary (Mul, a, b) => a->eval * b->eval

# $[main]
# def main =
#     let parser = expr_parser->map_to(eval) in
#     parser("2 * (5 - 1)")
