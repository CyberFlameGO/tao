#! Utilities for programming with functions.

## Create an recursive function inline using the fix combinator.
##
## ```
## let factorial = fix(fn rec => fn
##     | 0 => 1
##     \ m ~ n + 1 => m * rec(n))
## in
## factorial(10)
## ```
$[util]
fn fix A, B, e : ((A -> e ~ B) -> A -> e ~ B) -> A -> e ~ B =
    \ f, n => f(f->fix, n)!

## A functor with no environment.
class FnZero I =
    => O
    => call : I -> Self.O

## A functor.
class Fn I =
    => O
    => call : I -> Self -> Self.O

for I, O member I -> O of Fn I =
    => O = O
    => call = fn i, f => f(i)
