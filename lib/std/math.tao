#! Arithmetic operations.

import "../core/ops.tao"

class Zero =
    => zero : Self

$[util]
def zero A < Zero : A = A.zero

member Nat of Zero =
    => zero = 0

class One =
    => one : Self

$[util]
def one A < One : A = A.one

member Nat of One =
    => one = 1

class Sum where
    Self < Zero + Add Self with { Output = Self }

for A member A of Sum where
    A < Zero + Add A with { Output = A }

class Product where
    Self < One + Mul Self with { Output = Self }

for A member A of Product where
    A < One + Mul A with { Output = A }

class Num where
    Self < Sum + Product,

for A member A of Num where
    A < Sum + Product

# A generic vector type

class VecData A =
    => Data
    => splat : A -> Self.Data
    => map : Self.Data -> (A -> A) -> Self.Data
    => map2 : Self.Data -> Self.Data -> (A -> A -> A) -> Self.Data

data Vec A, N < VecData A = N.Data

for A, N member Vec A N of Add (Vec A N) where
    N < VecData A,
    A < Add A with { Output = A },
=
    => Output = Self
    => add = fn Vec xs, Vec ys => Vec N.map2(xs, ys, fn x, y => x + y)

#for A, B, N member Vec A N of Add B where
#    N < VecData A,
#    A < Add B with { Output = A },
#=
#    => Output = Self
#    => add = fn Vec xs, y => Vec N.map(xs, fn x => x + y)

for A, N member Vec A N of Mul (Vec A N) where
    N < VecData A,
    A < Mul A with { Output = A },
=
    => Output = Self
    => mul = fn Vec xs, Vec ys => Vec N.map2(xs, ys, fn x, y => x * y)

data N2
for A member N2 of VecData A =
    => Data = { x : A, y : A }
    => splat = fn e => { x : e, y : e }
    => map = fn xs, f => { x : f(xs.x), y : f(xs.y) }
    => map2 = fn xs, ys, f => { x : f(xs.x, ys.x), y : f(xs.y, ys.y) }

data N3
for A member N3 of VecData A =
    => Data = { x : A, y : A, z : A }
    => splat = fn e => { x : e, y : e, z : e }
    => map = fn xs, f => { x : f(xs.x), y : f(xs.y), z : f(xs.z) }
    => map2 = fn xs, ys, f => { x : f(xs.x, ys.x), y : f(xs.y, ys.y), z : f(xs.z, ys.z) }

$[util]
fn splat A, N < VecData A  : A -> Vec A N =
    e => Vec N.splat(e)

for A < Zero, N < VecData A member Vec A N of Zero =
    => zero = splat(A.zero)

for A < One, N < VecData A member Vec A N of One =
    => one = splat(A.one)

$[util]
fn mul_add A < Num : A -> A -> A -> A =
    x, y, z => x * y + z

#def mul_add_demo : Vec Nat N3 = mul_add(zero, one, one)
