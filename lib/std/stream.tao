#! Streams and stream combinators.
#!
#! In other languages, streams are often called 'iterators'.

import "value.tao"

class Stream =
    => Item
    => next : Self -> Maybe (Self, Self.Item)

class ToStream where
    Self.Stream < Stream
=
    => Stream
    => to_stream : Self -> Self.Stream

for A member [A] of ToStream =
    => Stream = [A]
    => to_stream = fn xs => xs

for A member Maybe A of Stream =
    => Item = A
    => next = fn
        | None => None
        \ Just x => Just (None, x)

for A member [A] of Stream =
    => Item = A
    => next = fn
        | [] => None
        \ [x .. xs] => Just (xs, x)

data Mapped S < Stream, B = (S, S.Item -> B)

for S < Stream, B member Mapped S B of Stream =
    => Item = B
    => next = fn Mapped (s, f) => when s->S.next is
        | None => None
        \ Just (s, x) => Just (Mapped (s, f), x->f)

for S < Stream, B member Mapped S B of ToStream =
    => Stream = Self
    => to_stream = fn s => s

fn smap S, B : (S.Stream.Item -> B) -> S -> Mapped S.Stream B where
    S < ToStream,
    S.Stream < Stream,
=
    f, s => Mapped (S.to_stream(s), f)

class FromStream A =
    => from_stream : [A] -> Self

for A member [A] of FromStream A =
    => from_stream = fn xs => xs

for A member Maybe A of FromStream A =
    => from_stream = fn
        | [] => None
        \ [x ..] => Just x

fn collect B < FromStream S.Item, S < Stream : S -> B =
    s => let xs = s->fix(fn rec, s => when s->S.next is
        | None => []
        \ Just (s, x) => [x .. rec(s)]) in xs->B.from_stream

fn collect_list S < Stream : S -> [S.Item] =
    s => s->fix(fn rec, s => when s->S.next is
        | None => []
        \ Just (s, x) => [x .. rec(s)])

data Range A = (A, A)

for A member Range A of Stream where
    A < Ord + Add A with { Output = A } + One
=
    => Item = A
    => next = fn Range (from, to) => if from >= to
        then None
        else
            let one : A = one in # TODO: This line is silly, figure out why we can't infer this
            Just (Range (from + one, to), from)

for A member Range A of Iter where
    A < Ord + Add A with { Output = A } + One
=
    => Item = A
    => next = fn Range (from, to) => if from >= to
        then None
        else
            let one : A = one in # TODO: This line is silly, figure out why we can't infer this
            Just (from, Range (from + one, to))

fn range A : A -> A -> Range A = from, to => Range (from, to)
