#! Utilities for type-level programming.

import "str.tao"

class Any =
    => type_name : Str

for A member A of Any =
    => type_name =
        let xs : [A] = [] in
        @type_name(xs)

$[util]
fn type_name_of A < Any =
    _ : A => A.type_name

## Apply one of two functions to a value depending on the type of the value.
##
## This can be used to specialise the implementation of code depending on the type of an
## expression.
$[util]
fn dispatch A, B, C : A -> (B -> C) -> (A -> C) -> C =
    x, special, fallback => dispatch_map(
        x,
        fn x => (x, x -> special),
        fn x => (x, x -> fallback),
    ).1

## Apply one of two functions to a value depending on the type of the value, mapping the value
## in the process.
##
## This can be used to specialise the implementation of code depending on the type of an
## expression.
$[util]
fn dispatch_map A, B, C : A -> (B -> (B, C)) -> (A -> (A, C)) -> (A, C) =
    x, special, fallback => @dispatch(x, special, fallback)
