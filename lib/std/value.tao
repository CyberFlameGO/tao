#! Utilities for working with values.

fn identity A : A -> A =
    \ x => x

# Default

class Default =
    => default : Self

def default A < Default : A = A.default

member Nat of Default =
    => default = Nat.zero

for A member [A] of Default =
    => default = []

for A < Default, B < Default member (A, B) of Default =
    => default = (A.default, B.default)

# From

class From A =
    => from : A -> Self

for A member A of From A =
    => from = identity

fn from A, B < From A = a => B.from(a)

class Into A =
    => into : Self -> A

fn into A < Into B, B = a => A.into(a)

for A, B < From A member A of Into B =
    => into = fn x => B.from(x)

member Int of From Nat =
    => from = fn x => --x

# Maybe

data Maybe A =
    | Just A
    \ None

for A member Maybe A of Default =
    => default = None

fn and_then_opt A, B, e : (A -> e ~ Maybe B) -> Maybe A -> e ~ Maybe B =
    | _, None => None
    \ f, Just a => a->f!
